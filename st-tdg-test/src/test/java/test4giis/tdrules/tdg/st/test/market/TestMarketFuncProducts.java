package test4giis.tdrules.tdg.st.test.market;

import org.junit.Test;
import giis.tdrules.store.loader.DataLoader;
import giis.tdrules.store.loader.IAttrGen;

/**
 * Products Functionality Tests
 * - Use the live SUT where the uids of each generated object are generated by the backend.
 * - Use the dictionary
 * - Include Products, Distilleries and Regions
 */
public class TestMarketFuncProducts extends BaseMarket {

	@Override
	protected boolean isLiveBackend() {
		return true;
	}
	
	@Test
	public void testProductsByDistillery() {
		// products of a distillery
		String query =  "tds ProductDTOReq where distillery ='Ardbeg'";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-ProductsByDistillery.txt", dg);
	}

	@Test
	public void testProductsByDistilleryAvaliable() {
		// available products of a distillery 
		String query =  "tds ProductDTOReq where distillery ='Ardbeg' and available = 1";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-ProductsByDistilleryAvailable.txt", dg);
	}
	
	@Test
	public void testProductsByDistilleryNotAvailable() {
		// non-available products of a distillery
		String query =  "tds ProductDTOReq where distillery ='Ardbeg' and available = 0";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-ProductsByDistilleryNotAvailable.txt", dg);
	}
	
	@Test
	public void testProductsByDistilleryPrice() {
		// available products of a distillery, price between two values
		String query =  "tds ProductDTOReq where distillery ='Ardbeg' and price < 100 and price > 5";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-ProductsByDistilleryPrice.txt", dg);
	}
	
	@Test
	public void testProductsByDistilleryPriceAge() {
		// available products of a distillery and an age, price between two values
		String query =  "tds ProductDTOReq where distillery ='Ardbeg' and price < 100 and price > 5 and age = 12";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-ProductsByDistilleryPriceAge.txt", dg);
	}
	
	
	@Test
	public void testDistilleryByTitle() {
		// distillery 
		String query =  "tds DistilleryDTOReq where title ='Ardbeg'";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-DistilleryByTitle.txt", dg);
	}
	
	@Test
	public void testDistilleryByRegion() {
		// distillery of a region
		String query =  "tds DistilleryDTOReq where region ='Islay'";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-DistilleryByRegion.txt", dg);
	}
	
	@Test
	public void testRegionByName() {
		// region
		String query =  "tds RegionDTOReq where name ='Campbeltown'";
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, query, dict);
		assertData("func-RegionByName.txt", dg);
	}

}
