package test4giis.tdrules.tdg.st.test.market;

import org.junit.Test;

import giis.tdrules.store.loader.DataLoader;
import giis.tdrules.store.loader.gen.IAttrGen;

/**
 * Carts Functionality Tests.
 * - Use the live SUT where the uids of each generated object are generated by the backend.
 * - Use the dictionary
 * - Include Users, Carts and Orders
 */
public class TestMarketFuncOrders extends BaseMarket {
	
	@Override
	protected boolean isLiveBackend() {
		return true;
	}
	
	@Test
	public void testOrderDTOByUser() {
		// order (cart must not be empty)
		// query 1 generates a non-empty cart, 
		// query 2 generates the order
		String query1= queryCartByUserProductQuantity;
		String query2 = queryOrderByUser;
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		generateAndLoad(dg, new String[] {query1, query2}, dict);
		assertData("func-OrderByUser.txt", dg);
	}
	
	@Test
	public void testGroupOrderDTOByProduct() {
		// orders (cart must not be empty)
		// query 1 generates a non-empty cart for several users with the same product, 
		// query 2 generates the orders
		// query 3 count the number of orders by products
		//original query1 = "tds CartDTO,CartItemDTORes,ProductDTORes where CartDTO.user='pepe@email.com' and CartItemDTORes.productId=1 and CartItemDTORes.quantity=5 and ProductDTORes.available=1";
		// String query1 = "tds CartDTO where CartDTO.user='pepe@email.com' "; // genera carritos vacíos
		// String query1 = "tds CartDTO,CartItemDTORes where CartDTO.user='pepe@email.com' "; // genera el mismo carrito para dos usuarios distintos
		// String query1 = "tds CartDTO,CartItemDTORes where CartDTO.user='pepe@email.com' and CartItemDTORes.quantity>0 "; // genera carritos donde unidades es 0  y la llamda al endpoint devuelve error:
		                   /*
								in2test.util.In2testException: QAGrowProcess.setGenerator: endWrite: Did not completed properly, response: 406  - body: {"message":"Argument validation error","description":"uri=/customer/cart","entityName":"cartItemDTO","fieldErrors":[{"field":"quantity","message":"Value shall be a positive number"}]}
		  						Posting to: http://localhost:8083/customer/cart
		  						With payload: {"productId":2,"user":"pepe@email.com","quantity":0}
		                    */
		// String query1 = "tds CartDTO,CartItemDTORes where CartDTO.user='pepe@email.com' and CartItemDTORes.quantity>2 "; //genera carritos distintos: (producto 1, quantity 3 + producto 3 quantity 1), (producto 1, quantity 3)  
		//String query0 = "tds UserDTORes where email='kk1@email.com' ";
		//String query00 = "tds UserDTORes where email='kk2@email.com' ";
		
		
		// v1 String query1 = "tds CartDTO,CartItemDTORes where CartDTO.user='pepe@email.com' and CartItemDTORes.quantity>2 ";
		//String query1 = "tds CartDTO,CartItemDTORes,ProductDTORes where CartDTO.user='pepe@email.com' and CartItemDTORes.quantity>2 and ProductDTORes.available=1";
		//String query2 = "tds OrderDTO where userAccount='pepe@email.com' ";
		
		
		//String query2 = "tds OrderDTO where userAccount='pepe@email.com' ";
		// v1 String query2 = "select count(OrderDTO.id) from OrderDTO,OrderedProductDTO where OrderedProductDTO.productId = 2 and userAccount='pepe@email.com'and OrderDTO.id=OrderedProductDTO.orderId group by OrderedProductDTO.productId";
		String query2 = "select count(OrderDTO.id) from OrderDTO,OrderedProductDTO where userAccount='pepe@email.com'and OrderDTO.id=OrderedProductDTO.orderId group by OrderedProductDTO.productId";
		//String query1=  "tds CartDTO where CartDTO.user='pepe@email.com'"; // genera dos carritos vacíos
		
		
		IAttrGen dict=getDictionaryAttrGen();
		DataLoader dg = getLiveDataLoader().setAttrGen(dict);
		//generateAndLoad(dg, new String[] {query1,query2}, dict);
	
	    generateAndLoad(dg, query2, dict);
		assertData("func-GroupOrderByProduct.txt", dg);
	}
}
