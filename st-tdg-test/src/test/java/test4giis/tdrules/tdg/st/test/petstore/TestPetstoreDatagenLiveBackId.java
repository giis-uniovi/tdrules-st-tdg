package test4giis.tdrules.tdg.st.test.petstore;

import org.junit.Test;

import giis.tdrules.store.loader.DataLoader;
import giis.tdrules.store.loader.oa.IPathResolver;
import giis.tdrules.store.loader.oa.OaLiveAdapter;
import giis.tdrules.store.loader.oa.OaLiveUidGen;
import giis.tdrules.store.loader.oa.OaPathResolver;

/** 
 * Test Data generation for APIs (TDG) for the Swagger Petstore as SUT:
 * Only data loading, but using a live SUT where the uids of each generated
 * object are generated by the backend.
 */
public class TestPetstoreDatagenLiveBackId extends BasePetstore {

	@Override
	protected boolean isLiveBackend() {
		return true;
	}
	
	// The swagger petstore does not generate uids in the backend.
	// A new endpoint (backid) has been included to illustrate this functionality.
	// As this is not specified in the model, we use a custom path resolver
	// to identify the appropriate endpoint
	public class CustomPathResolver extends OaPathResolver {
		@Override
		public String getEndpointPath(String tableName) {
			if ("Pet".equals(tableName) || "Category".equals(tableName))
				return "/backid/" + tableName.toLowerCase();
			else
				return super.getEndpointPath(tableName);
		}
	}
	
	// The BaseAll class instantiates data loaders using the default path resolver.
	// We override this method to allow the custom path resolver be injected by the data adapter
	@Override
	protected DataLoader getLiveDataLoader() {
		IPathResolver pathResolver=new CustomPathResolver();
		return new DataLoader(getSchema(), new OaLiveAdapter(getServerUrl()).setPathResolver(pathResolver)).setUidGen(new OaLiveUidGen());
	}
	
	/**
	 * Example of two related entities.
	 */
	@Test
	public void testPetByCategoryAndStatus() {
		DataLoader dg=getDataLoader();
		dg.load("Category", "id=@cid1, name=Dogs");
		dg.load("Pet_Tags_xa", "fk_xa=@pid1");
		dg.load("Pet_photoUrls_xa", "fk_xa=@pid1");
		dg.load("Pet", "id=@pid1, category::id=@cid1, status=available");
		
		dg.load("Pet_Tags_xa", "fk_xa=@pid2");
		dg.load("Pet_photoUrls_xa", "fk_xa=@pid2");
		dg.load("Pet", "id=@pid2, category::id=@cid1, status=sold");

		dg.load("Category", "id=@cid2, name=1");
		dg.load("Pet_Tags_xa", "fk_xa=@pid3");
		dg.load("Pet_photoUrls_xa", "fk_xa=@pid3");
		dg.load("Pet", "id=@pid3, category::id=@cid2, status=available");
		
		dg.load("Category", "id=@cid3");
		
		dg.load("Pet_photoUrls_xa", "fk_xa=@pid4");
		dg.load("Pet", "id=@pid4, category::id=@cid1, status=available");
		
		dg.load("Pet_Tags_xa", "fk_xa=@pid5");
		dg.load("Pet", "id=@pid5, category::id=@cid1, status=available");
		
		assertData("datagen-livebackid-pet-by-category-status.txt", dg);
	}

}
